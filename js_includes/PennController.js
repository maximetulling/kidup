/*!
 * PennController for IBEX
 * This software is licensed under a BSD license; see the LICENSE file for details.
 * 
 *  - Version 1.8
 *  - Last Update:  2020, May 24
 *  - Major changes in version 1.8:
 *    * Debug window now reports PennController version
 *    * Containers of elements .print-ed with coordinates no longer remain on the screen after the trial
 *    * Special commands clear and end now also work in .callback commands
 *    * Fixed cluttering of results file from injected controllers
 *    * Fixed timeout feature of injected controllers (eg. DashedController in speeded acceptability mode)
 *    * Fixed selector.test.selected: it no longer crashes when no selection happened
 *    * Fixed unsuccessful wait on Key elements when focused element has been disabled (eg. after click on once-scale)
 *    * Space characters in initial and final position of Text elements are now non-breakable spaces
 *    * Updated display of Scale elements
 *    * Fixed reference to DropDown elements' value that would prevent testing them and setting Var elements
 *    * Fixed automatic naming of MediaRecorder (formerly VoiceRecorder) files
 *    * Failed uploads of recordings now ask participants to download an archive containing the samples before proceeding
 *    * Media recordings are now encoded as WEBM, OGG or MP4, depending on browser support
 *    * Fixed mediarecorder.test.hasPlayed (formerly voicerecorder.test.hasPlayed)
 *    + Added MediaRecorder element, VoiceRecorder is now deprecated, use newMediaRecorder("name", "audio") instead
 *    + Added PennController.UploadRecordings: creates a trial that uploads the samples recorded (but not sent) so far
 *    + PennController.InitiateRecorder can now take a third parameter to customize the consent form text
 *    + Accordingly added methods PennController.InitiateRecorder().warning(text) and PennController.InitiateRecorder().consent(text)
 *    + Added PennController.EyeTrackerURL to set where to send eyetracking data
 *    + Added PennController.version
 */
/*! $AC$ PennController.newVoiceRecorder(name,file) Creates a new VoiceRecorder element $AC$$AC$ PennController.getVoiceRecorder(name) Retrieves an existing Video element $AC$$AC$ global.PennController.InitiateRecorder(url,warning,consent) Sets the URL where to upload the recordings and creates a trial inviting the user to activate their microphone $AC$$AC$ global.PennController.UploadVoiceRecordings(label,noblock) Creates a trial that sends the voice recordings to the server $AC$$AC$ VoiceRecorder PElement.play() Starts playing back the recording $AC$$AC$ VoiceRecorder PElement.record() Starts recording $AC$$AC$ VoiceRecorder PElement.stop() Stops playback or recording $AC$$AC$ VoiceRecorder PElement.wait() Waits until recording stops before proceeding $AC$$AC$ VoiceRecorder PElement.once() Will disable the recording interface after the first recording is complete $AC$$AC$ VoiceRecorder PElement.log() Will log events in the results file $AC$$AC$ VoiceRecorder PElement.test.hasPlayed() Checks that the recording was fully played back before $AC$$AC$ VoiceRecorder PElement.test.playing() Checks that the recording is currently being played back $AC$$AC$ VoiceRecorder PElement.test.recorded() Checks that recording has happened $AC$$AC$ global.PennController.DownloadVoiceButton(text) Returns an HTML string representing a button to download an archive of the recordings $AC$ */
/*! $AC$ PennController.newYoutube(name,url) Creates a new Youtube element with the specified URL $AC$$AC$ PennController.getYoutube(name) Retrieves an existing Youtube element $AC$$AC$ Youtube PElement.play() Starts playing the video (visible only if print was called) $AC$$AC$ Youtube PElement.pause() Pauses the video $AC$$AC$ Youtube PElement.print() Shows Youtube's video player $AC$$AC$ Youtube PElement.remove() Removes Youtube's video player $AC$$AC$ Youtube PElement.stop() Stops the video and goes back to the beginning $AC$$AC$ Youtube PElement.wait() Wait until the video reaches the end before proceeding $AC$$AC$ Youtube PElement.disable() Disables the Youtube video player $AC$$AC$ Youtube PElement.enable() Enables the Youtube video player (again) $AC$$AC$ Youtube PElement.once() Will disable the Youtube video player after the video has played once $AC$$AC$ Youtube PElement.log() Will log play and/or stop events in the results file $AC$$AC$ Youtube PElement.test.hasPlayed() Checks that the video has ever played through before $AC$$AC$ Youtube PElement.test.playing() Checks that the video is currently playing $AC$ */
/*! $AC$ PennController.newVideo(name,file) Creates a new Video element using the specified file $AC$$AC$ PennController.getVideo(name) Retrieves an existing Video element $AC$$AC$ Video PElement.play() Starts playing the video (visible only if print was called) $AC$$AC$ Video PElement.pause() Pauses the video $AC$$AC$ Video PElement.print() Shows a video player $AC$$AC$ Video PElement.stop() Stops playing the video $AC$$AC$ Video PElement.wait() Waits untils the video reaches the end before proceeding $AC$$AC$ Video PElement.disable(opacity) Disable controls on the Video element $AC$$AC$ Video PElement.once() Will disable the video player after the video has played through once $AC$$AC$ Video PElement.log() Will log play and/or stop events in the results file $AC$$AC$ Video PElement.test.hasPlayed() Checks that the video has played through at least once before $AC$$AC$ Video PElement.test.playing() Checks that the video is currently playing $AC$ */
/*! $AC$ PennController.newVar(name,value) Creates a new Var element $AC$$AC$ PennController.getVar(name) Retrieves an existing Var element $AC$$AC$ Var PElement.set(value) Sets the value (can be a function, e.g. v=>v+1 will increment the value) $AC$$AC$ Var PElement.local() Ensures that the value of this Var element only affects the current trial $AC$$AC$ Var PElement.global() Shares the value with all Var elements with the same name across trials $AC$$AC$ Var PElement.test.is(value) Checks the value of the Var element (can be a function, e.g. v=>v<10) $AC$$AC$ all PElements.setVar(var) Sets the value of the specified Var element with the current value of the element $AC$ */
/*! $AC$ PennController.newTooltip(name,text) Creates a new Tooltip element $AC$$AC$ PennController.getTooltip(name) Retrieves an existing Tooltip element $AC$$AC$ Tooltip PElement.print(element) Prints the tooltip attached to the specified element $AC$$AC$ Tooltip PElement.wait() Waits until the tooltip gets validated before proceeding $AC$$AC$ Tooltip PElement.css(css) Applies the specified CSS to the frame around the target element $AC$$AC$ Tooltip PElement.key(key) Will validate (and remove) the tooltip whenever the specified key is pressed $AC$$AC$ Tooltip PElement.label(text) Defines the text used for the validation label $AC$$AC$ Tooltip PElement.log() Will log when the tooltip is validated in the results file $AC$$AC$ Tooltip PElement.position(position) Will show the tooltip at the top, at the bottom, to the left or to the right of the element it attaches to $AC$$AC$ Tooltip PElement.text(value) Redefines the text of the tooltip $AC$ */
/*! $AC$ PennController.newTimer(name,duration) Creates a new Timer element $AC$$AC$ PennController.getTimer(name) Retrieves an existing Timer element $AC$$AC$ Timer PElement.start() Starts the timer $AC$$AC$ Timer PElement.stop() Stops the timer $AC$$AC$ Timer PElement.wait() Waits until the timer elapses before proceeding $AC$$AC$ Timer PElement.callback(commands) Will execute the specified command(s) whenever the timer elapses $AC$$AC$ Timer PElement.log() Will log when the timer starts and ends in the results file $AC$$AC$ Timer PElement.test.ended() Checks that the timer has ever elapsed before $AC$$AC$ Timer PElement.test.running() Checks that the timer is currently running $AC$ */
/*! $AC$ PennController.newTextInput(name,text) Creates a new TextInput element $AC$$AC$ PennController.getTextInput(name) Retrieves an existing TextInput element $AC$$AC$ TextInput PElement.wait() Waits until Enter is pressed in the input box before proceeding $AC$$AC$ TextInput PElement.length(number) Limits the maximum number of characters in the input box to the specified number $AC$$AC$ TextInput PElement.lines(number) Limits the maximum number of lines in the input box to the specified number $AC$$AC$ TextInput PElement.log() Will log the text from the input box in the results file $AC$$AC$ TextInput PElement.once() Will disable the input box after the first keypress on Enter/Return $AC$$AC$ TextInput PElement.text(value) Replaces whatever is in the input box with the specified value $AC$$AC$ TextInput PElement.test.text(value) Checks that the content of the input box corresponds to the specified value $AC$ */
/*! $AC$ PennController.newText(name,text) Creates a new Text element $AC$$AC$ PennController.getText(name) Retrieves an existing Text element $AC$$AC$ Text PElement.unfold(duration) Unfolds the text in duration milliseconds $AC$$AC$ Text PElement.text(text) Redefines the text of the element $AC$$AC$ Text PElement.test.text(value) Checks that the text of the element corresponds to the specified value $AC$ */
/*! $AC$ PennController.newSelector(name) Creates a new Selector element $AC$$AC$ PennController.getSelector(name) Retrieves an existing Selector element $AC$$AC$ Selector PElement.select(element) Selects the specified element $AC$$AC$ Selector PElement.shuffle() Shuffles the positions on the page of the selector's elements $AC$$AC$ Selector PElement.unselect() Unselects the element that is currently selected $AC$$AC$ Selector PElement.wait() Waits until a selection happens before proceeding $AC$$AC$ Selector PElement.add(elements) Adds one or more elements to the selector $AC$$AC$ Selector PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$$AC$ Selector PElement.disableClicks() Disables selection by click $AC$$AC$ Selector PElement.enableClicks() Enables selection by click (again) $AC$$AC$ Selector PElement.frame(css) Attributes the CSS style to the selection frame $AC$$AC$ Selector PElement.keys(keys) Associates the elements in the selector (in the order they were added) with the specified keys $AC$$AC$ Selector PElement.log() Will log any selection to the results file $AC$$AC$ Selector PElement.once() Will disable the selector after the first selection $AC$$AC$ Selector PElement.test.selected(element) Checks that the specified element, or any element if non specified, is selected $AC$$AC$ Selector PElement.test.index(element,index) Checks that the specified element is at the specified index position in the selector $AC$$AC$ all PElements.selector(selector) Adds the element to the specified selector $AC$ */
/*! $AC$ PennController.newScale(name,numberOrValues) Creates a new Scale element $AC$$AC$ PennController.getScale(name) Retrieves an existing Scale element $AC$$AC$ Scale PElement.select(option) Selects the specified option on the scale $AC$$AC$ Scale PElement.wait() Waits until a selection happens before proceeding $AC$$AC$ Scale PElement.button() Transforms the scale options into buttons $AC$$AC$ Scale PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$$AC$ Scale PElement.default(value) Sets the specified value to be selected by default $AC$$AC$ Scale PElement.horizontal() Aligns the scale's options horizontally (again) $AC$$AC$ Scale PElement.keys(keys) Associates the scale's options with the specified keys for selection $AC$$AC$ Scale PElement.label(index,label) Gives the specified label to the option at the specified index on the scale $AC$$AC$ Scale PElement.labelsPosition(position) Will show the labels on top, at the bottom, to the left or to the right of the options $AC$$AC$ Scale PElement.log() Will log the selected option in the results file $AC$$AC$ Scale PElement.once() Will disable the scale after the first selection $AC$$AC$ Scale PElement.radio() Will show the scale's options as radio buttons $AC$$AC$ Scale PElement.slider() Will show the scale as a slider $AC$$AC$ Scale PElement.horizontal() Aligns the scale's options vertically $AC$$AC$ Scale PElement.test.selected(option) Checks that the option, or any option if none specified, is selected $AC$ */
/*! $AC$ PennController.newPalette(name) Creates a new Palette element $AC$$AC$ PennController.getPalette(name) Retrieves an existing Palette element $AC$$AC$ Palette PElement.brush(element,color) Colors the specified element with the specified color $AC$$AC$ Palette PElement.clear() Makes all the elements of the palette transparent $AC$$AC$ Palette PElement.unselect() Unselects the color from the palette that was currently selected $AC$$AC$ Palette PElement.wait() Waits until an element is clicked and colored before proceeding $AC$$AC$ Palette PElement.addColor(color,element) Adds the specified color to the palette, to be selected by clicking on the specified element $AC$$AC$ Palette PElement.addElement(elements) Adds the specified element(s) as targets for coloration $AC$$AC$ Palette PElement.callback(commands) Will execute the specified command(s) whenever an element is colored $AC$$AC$ Palette PElement.enable() Enables the palette $AC$$AC$ Palette PElement.disable() Disables the palette $AC$$AC$ Palette PElement.log() Will log any coloration to the results file $AC$$AC$ Palette PElement.once() Will disable the palette after the first coloration $AC$$AC$ Palette PElement.remove(color) Removes the specified color from the palette (leaving any associated element on the page) $AC$$AC$ Palette PElement.test.color(element,color) Checks that the specified element has been colored with the specified color $AC$ */
/*! $AC$ PennController.newMouseTracker(name) Creates a new MouseTracker element $AC$$AC$ PennController.getMouseTracker(name) Retrieves an existing MouseTracker element $AC$$AC$ Mouse PElement.start() Starts listening to mouse movements $AC$$AC$ Mouse PElement.stop() Stops listening to mouse movements $AC$$AC$ Mouse PElement.callback( commands ) Runs the specified command(s) when the mouse moves $AC$$AC$ Mouse PElement.log() Logs the X and Y positions of the mouse $AC$ */
/*! $AC$ PennController.newMediaRecorder(name,type) Creates a new MediaRecorder element of type "audio" or "video" $AC$$AC$ PennController.getMediaRecorder(name) Retrieves an existing MediaRecorder element $AC$$AC$ global.PennController.InitiateRecorder(url,warning,consent) Sets the URL where to upload the recordings and creates a trial inviting the user to activate their microphone $AC$$AC$ global.PennController.UploadRecordings(label,noblock) Creates a trial that sends the recordings to the server $AC$$AC$ MediaRecorder PElement.play() Starts playing back the recording $AC$$AC$ MediaRecorder PElement.record() Starts recording $AC$$AC$ MediaRecorder PElement.stop() Stops playback or recording $AC$$AC$ MediaRecorder PElement.wait() Waits until recording stops before proceeding $AC$$AC$ MediaRecorder PElement.once() Will disable the recording interface after the first recording is complete $AC$$AC$ MediaRecorder PElement.log() Will log events in the results file $AC$$AC$ MediaRecorder PElement.test.hasPlayed() Checks that the recording was fully played back before $AC$$AC$ MediaRecorder PElement.test.playing() Checks that the recording is currently being played back $AC$$AC$ MediaRecorder PElement.test.recorded() Checks that recording has happened $AC$$AC$ global.PennController.DownloadRecordingButton(text) Returns an HTML string representing a button to download an archive of the recordings $AC$ */
/*! $AC$ PennController.newKey(name,key) Creates a new Key element $AC$$AC$ PennController.getKey(name) Retrieves an existing Key element $AC$$AC$ Key PElement.wait() Waits until the key, or one of the keys, is pressed before proceeding $AC$$AC$ Key PElement.callback(commands) Will run the specified command(s) whenever a valid keypress happens $AC$$AC$ Key PElement.disable() Stops listening to keypresses $AC$$AC$ Key PElement.enable() Starts listening to keypresses (again) $AC$$AC$ Key PElement.log() Will log any valid keypress in the results file $AC$$AC$ Key PElement.test.pressed(key) Checks that the key, or any key if none specified, has been pressed before $AC$ */
/*! $AC$ PennController.newImage(name,file) Creates a new Image element $AC$$AC$ PennController.getImage(name) Retrieves an existing Image element $AC$ */
/*! $AC$ PennController.newHtml(name,file) Creates a new Html element $AC$$AC$ PennController.getHtml(name) Retrieves an existing Html element $AC$$AC$ Html PElement.warn() Displays warning messages if some obligatory fields were not filled $AC$$AC$ Html PElement.checkboxWarning(message) Defines the warning message displayed when an obligatory checkbox group is not checked $AC$$AC$ Html PElement.inputWarning(message) Defines the warning message displayed when an obligatory input is not filled $AC$$AC$ Html PElement.log() Logs the values of the fields from the Html in the results file $AC$$AC$ Html PElement.radioWarning(message) Defines the warning message displayed when an radio button group input is not selected $AC$$AC$ Html PElement.test.complete() Checks that all the obligatory fields have been filled $AC$ */
/*! $AC$ PennController.newGroup(name,elements) Creates a new Group element $AC$$AC$ PennController.getGroup(name) Retrieves an existing Group element $AC$$AC$ Group PElement.shuffle() Shuffles the positions of the elements on the page $AC$$AC$ Group PElement.add(elements) Adds one or more elements to the group $AC$$AC$ Group PElement.remove(elements) Removes one or more elements from the group $AC$$AC$ Group PElement.test.index(element,index) Checks the index of the specified element in the group $AC$$AC$ all PElements.group(name) Adds the element to the Group element with the specified name $AC$ */
/*! $AC$ PennController.newFunction(name,function) Creates a new Function element $AC$$AC$ PennController.getFunction(name) Retrieves an existing Function element $AC$$AC$ Function PElement.call() Executes the function $AC$$AC$ Function PElement.test.is(value) Checks that the function returns the specified value $AC$ */
/*! $AC$ PennController.newEyeTracker(name) Creates a new EyeTracker element $AC$$AC$ PennController.getEyeTracker(name) Retrieves an existing EyeTracker element $AC$$AC$ PennController.EyeTrackerURL(url) Will send eye-tracking data to specified URL $AC$$AC$ EyeTracker PElement.calibrate(threshold,attempts) Starts a sequence of calibration $AC$$AC$ EyeTracker PElement.hideFeedback() Hides the red dot estimating the position of the eyes on the page $AC$$AC$ EyeTracker PElement.start() Starts parsing eye movements $AC$$AC$ EyeTracker PElement.stop() Stops parsing eye movements $AC$$AC$ EyeTracker PElement.stopTraining() Stop training the model whenever the mouse moves or clicks $AC$$AC$ EyeTracker PElement.showFeedback() Shows the red dot estimating the position of the eyes on the page $AC$$AC$ EyeTracker PElement.train() Starts training the model on every click and mouse movement (default) $AC$$AC$ EyeTracker PElement.add(elements) Adds one or more elements of interest to the EyeTracker $AC$$AC$ EyeTracker PElement.callback(function) Runs the specified javascript function whenever the eyes look at an element of interest $AC$$AC$ EyeTracker PElement.log() Logs the X and Y positions of the eyes every N milliseconds (see documentation) $AC$$AC$ EyeTracker PElement.trainOnMouseMove(true) Tells the model whether to use mouse movements to improve its estimations $AC$ */
/*! $AC$ PennController.newDropDown(name,text) Creates a new DropDown element $AC$$AC$ PennController.getDropDown(name) Retrieves an existing DropDown element $AC$$AC$ DropDown PElement.shuffle() Shuffles the options currently in the drop-down $AC$$AC$ DropDown PElement.select(option) Selects the specified option $AC$$AC$ DropDown PElement.wait() Wait until an option is selectd before proceeding $AC$$AC$ DropDown PElement.add(options) Adds one or more options to the drop-down $AC$$AC$ DropDown PElement.remove(option) Removes the specified option from the drop-down $AC$$AC$ DropDown PElement.test.selected(option) Checks that the specified option, or any if none specified, is selected $AC$ */
/*! $AC$ PennController.newController(name,controller,options) Creates a new Controller element $AC$$AC$ PennController.getController(name) Retrieves an existing Controller element $AC$$AC$ Controller PElement.wait() Waits until the controller has been completed before proceeding $AC$ */
/*! $AC$ PennController.newCanvas(name,width,height) Creates a new Canvas element $AC$$AC$ PennController.getCanvas(name) Retrieves an existing Canvas element $AC$$AC$ Canvas PElement.add(x,y,element) Places an element at (X,Y) on the canvas $AC$ */
/*! $AC$ PennController.newButton(name,text) Creates a new Button element $AC$$AC$ PennController.getButton(name) Retrieves an existing Button element $AC$$AC$ Button PElement.click() Simulates a click on the button $AC$$AC$ Button PElement.wait() Waits until the button is clicked before proceeding $AC$$AC$ Button PElement.callback(commands) Tell the button to run a (series of) command(s) whenever it is clicked $AC$$AC$ Button PElement.log() Logs clicks on the button in the results file $AC$$AC$ Button PElement.once() Will disable the button after the first click $AC$$AC$ Button PElement.test.clicked() Checks that the button has been clicked before $AC$ */
/*! $AC$ PennController.newAudio(name,file) Creates a new Audio element $AC$$AC$ PennController.getAudio(name) Retrieves an existing Audio element $AC$$AC$ Audio PElement.play() Starts the audio playback $AC$$AC$ Audio PElement.pause() Pauses the audio playback $AC$$AC$ Audio PElement.print() Prints an interface to control the audio playback $AC$$AC$ Audio PElement.stop() Stops the audio playback $AC$$AC$ Audio PElement.wait() Waits until the audio playback has ended $AC$$AC$ Audio PElement.disable(opacity) Disables the interface $AC$$AC$ Audio PElement.enable() Enables the interface $AC$$AC$ Audio PElement.once() The interface will be disabled after the first playback $AC$$AC$ Audio PElement.log() Logs playback events $AC$$AC$ Audio PElement.test.hasPlayed() Checks whether the audio has ever been played fully $AC$$AC$ Audio PElement.test.playing() Checks whether the audio is currently playing $AC$ */
/*! $AC$ PennController().label(label) Assigns a label to the generated PennController trial $AC$$AC$ PennController().log(name,value) Adds value to each line of this trial in the results file $AC$$AC$ PennController().noHeader() Will not run commands from the header at the beginning of this trial $AC$$AC$ PennController().noFooter() Will not run commands from the footer at the end of this trial $AC$$AC$ PennController().setOption(option,value) Sets options for the controller (see Ibex manual) $AC$$AC$ global.PennController.Debug() Enables the debug mode for testing your experiment $AC$$AC$ global.PennController.DebugOff() Disables the debug mode; use before making public $AC$$AC$ global.PennController.Sequence(sequence) Defines the running order of your trials, based on their labels (see documentation) $AC$$AC$ global.PennController.GetURLParameter(parameter) Returns the value of the parameter from the URL $AC$$AC$ global.PennController.AddHost(url) Will look resources at the specified URL $AC$$AC$ global.PennController.CheckPreloaded() Creates a trial that is validated when the resources are preloaded $AC$$AC$ global.PennController.SendResults(label) Creates a trial that sends the results to the server $AC$$AC$ global.PennController.SetCounter(value) Set Ibex's internal counter to a specified value (see Ibex manual) $AC$$AC$ global.PennController.Header(commands) Will run the commands at the beginning of every PennController trial $AC$$AC$ global.PennController.Footer(commands) Will run the commands at the end of every PennController trial $AC$$AC$ all PElements.print() Prints the element $AC$$AC$ all PElements.refresh() Reprints the element where it is $AC$$AC$ all PElements.remove() Removes the element from the page $AC$$AC$ all PElement.wait() Waits until the element has been validated before proceeding $AC$$AC$ all PElements.after(element) Prints an element to the right of the current element $AC$$AC$ all PElements.before(element) Prints an element to the left of the current element $AC$$AC$ all PElements.bold() Prints the text, if any, as boldfaced $AC$$AC$ all PElements.center() Centers the element on the page $AC$$AC$ all PElements.color(color) Prints the text, if any, in the color specified $AC$$AC$ all PElements.cssContainer(option,value) Applies the CSS to the container of the element $AC$$AC$ all PElements.css(option,value) Applies the CSS to the element $AC$$AC$ all PElements.disable() Disables the element $AC$$AC$ all PElements.enable() Enables the element $AC$$AC$ all PElements.hidden() Hides the element (will still leave a blank space) $AC$$AC$ all PElements.italic() Prints the text, if any, as italicized $AC$$AC$ all PElements.left() Aligns the element with the left edge of the printing area $AC$$AC$ all PElements.right() Aligns the element with the right edge of the printing area $AC$$AC$ all PElements.size(width,height) Gives the element a specific width and/or height $AC$$AC$ all PElements.visible() Makes the element visible (again) $AC$$AC$ all PElements.test.printed() Checks that the element is printed on the page $AC$$AC$ Special Command.fullscreen() Makes the page fullscreen $AC$$AC$ Special Command.exitFullscreen() Goes back to non-fullscreen $AC$$AC$ Special Command.clear() Removes all the PElements currently on the page $AC$$AC$ Special Command.end() Ends the trial immediately $AC$$AC$ global.PennController.ResetPrefix(prefix) Resets the prefix for the new* and get* commands; pass null to make them global $AC$$AC$ global.PennController.Template(table,penncontroller) Generates trials from a table $AC$$AC$ global.PennController.PreloadZip() Silently downloads a ZIP file containing resources $AC$ */!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=140)}([function(e,t,n){"use strict";n.d(t,"a",function(){return a});var i=n(1);let r=[],s={keypress:[]};class o{constructor(e,t){this.name=e,this.value=e,this.creator=t,this.controllers=[],this.object=null,this.status="void"}create(){this.status="pending",this.creator.apply(this,[()=>this.resolve()])}resolve(){this.status="ready",a.debug.log("<div style='color: purple;'>Successfully preloaded resource "+this.name+"</div>")}}var a={resources:{list:[],fetch:function(e,t,n){n=null==n|1==n;var i=a.resources.list.filter(t=>t.name==e&&t.controllers.indexOf(a.controllers.underConstruction.id)<0);if((i=i.length?i[0]:new o(e,t)).controllers.push(a.controllers.underConstruction.id),a.controllers.underConstruction.resources.push(i),"void"!=i.status)return i;if(i.creator=t,i.create(),n)for(let t in a.URLs)i.create.apply($.extend({},i,{value:a.URLs[t]+e,resolve:function(){"ready"!=i.status&&(i.object=this.object,i.resolve())}}));return a.resources.list.push(i),i}},controllers:{list:[],running:null,underConstruction:null},elements:{list:[]},events:{keypress:e=>{let t=[e,a.controllers.running||a.controllers.underConstruction];if(s.keypress.push(t),a.controllers.running){let e=a.controllers._endTrial;a.controllers.running._endTrial=async function(){await e.apply(a.controllers.running),t[0]=(()=>{})}}else{let e=a.controllers.underConstruction.sequence;a.controllers.underConstruction.sequence=Object(i.d)([e,e=>{t[0]=(()=>{}),e()}])}}},URLs:[],utils:{guidGenerator:i.b,parseCoordinates:i.g,levensthein:i.e},tmpItems:[],tables:{},Prerun:function(e){r.push(e)}};let l=window.ibex_controller_set_properties;window.ibex_controller_set_properties=function(e,t){if(l(e,t),"__SendResults__"==e){document.addEventListener("keydown",e=>{if(!e.repeat&&a.controllers.running)for(let t=0;t<s.keypress.length;t++)a.controllers.running!=s.keypress[t][1]&&a.controllers.running.id!=s.keypress[t][1]||s.keypress[t][0].apply(this,[e])});for(let e in r)r[e]instanceof Function&&r[e].call()}}},function(e,t,n){"use strict";function i(e){return()=>new Promise(async function(t){for(let t in e)if(e[t]instanceof Function)var n=await e[t]();t(n)})}function r(e){const t=new Uint8Array(e);let n=[];return t.forEach(e=>{n.push(e.toString(16))}),n.join("").toUpperCase()}function s(e,t){if(e.match(/^00000[12]00/i))return"image/x-icon";if(e.match(/424D/i))return"image/bmp";if(e.match(/^89504E470?D0?A1A0?A/i))return"image/png";if(e.match(/^474946383[79]61/i))return"image/gif";if(e.match(/^52494646........574542505650/i))return"image/webp";if(e.match(/^FFD8FF/i))return"image/jpeg";if(e.match(/^2E736E64/i))return"audio/basic";if(e.match(/^464F524D........41494646/i))return"audio/aiff";if(e.match(/^(fff[b3a2]|494433)/i))return"audio/mpeg";if(e.match(/^4F67675300/i))return"application/ogg";if(e.match(/^4D546864......06/i))return"audio/midi";if(e.match(/^52494646........41564920/i))return"video/avi";if(e.match(/^52494646.{4,8}57415645/i))return"audio/wave";if(e.match(/^1A45DFA3/i))return"video/webm";if(e.match(/^25504446/i))return"application/pdf";if(e.match(/^504B0304/i))return"application/zip";{let e=t.match(/\.([^.]+)$/);if(!e)return"";switch(e[1].toLowerCase()){case"bmp":return"image/bmp";case"png":return"image/png";case"gif":return"image/gif";case"webp":return"image/webp";case"jpg":case"jpeg":return"image/jpeg";case"mp3":return"audio/mpeg";case"ogg":case"oga":return"audio/ogg";case"midi":case"mid":return"audio/midi";case"wav":return"audio/wave";case"webm":return"video/webm";case"avi":return"video/avi";case"mp4":return"video/mp4";case"ogv":return"video/ogg";case"mov":return"video/quicktime";default:return""}}}function o(e){let t=e/1e3%60,n=Math.trunc(e/6e4);return(n>0?n+"min":"")+(t>0?t+"s":"")}function a(){var e=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}function l(e){return e.map(e=>e instanceof Object&&e.hasOwnProperty("_promises")?e.type+":"+e._element.id:e)}function u(e,t,n){let i=String(e).match(/^(.+)\s+at\s+(.+)$/i),r=String(t).match(/^(.+)\s+at\s+(.+)$/i);return i&&i[2].match(/^\d+(\.\d+)?$/)&&(i[2]=String(i[2])+"px"),r&&r[2].match(/^\d+(\.\d+)?$/)&&(r[2]=String(r[2])+"px"),i&&(e=i[1].match(/center|middle/i)?"calc("+i[2]+" - "+n.width()/2+"px)":i[1].match(/right/i)?"calc("+i[2]+" - "+n.width()+"px)":i[2]),r&&(t=r[1].match(/center|middle/i)?"calc("+r[2]+" - "+n.height()/2+"px)":r[1].match(/bottom/i)?"calc("+r[2]+" - "+n.height()+"px)":r[2]),{x:e,y:t}}function h(e,t){let n=[];n[0]=("a"+t).split("").map((e,t)=>t);for(let i=1;i<e.length+1;i++)n[i]=[i,...t.split("").map(()=>0)];for(let i=1;i<t.length+1;i++)for(let r=1;r<e.length+1;r++){let s=e.charAt(r)!=t.charAt(i),o=n[r-1][i]+1,a=n[r][i-1]+1,l=n[r-1][i-1]+s;n[r][i]=o<a&&o<l?o:a<o&&a<l?a:l}return n[e.length][t.length]}n.d(t,"d",function(){return i}),n.d(t,"c",function(){return r}),n.d(t,"a",function(){return s}),n.d(t,"f",function(){return o}),n.d(t,"b",function(){return a}),n.d(t,"h",function(){return l}),n.d(t,"g",function(){return u}),n.d(t,"e",function(){return h});let c=["Unidentified","Alt","AltGraph","CapsLock","Control","Fn","FnLock","Meta","NumLock","ScrollLock","Shift","Symbol","SymbolLock","Hyper","Super","Enter","Tab","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","End","Home","PageDown","PageUp","Backspace","Clear","Copy","CrSel","Cut","Delete","EraseEof","ExSel","Insert","Paste","Redo","Undo","Accept","Again","Attn","Cancel","ContextMenu","Escape","Execute","Find","Help","Pause","Play","Props","Select","ZoomIn","ZoomOut","BrightnessDown","BrightnessUp","Eject","LogOff","Power","PowerOff","PrintScreen","Hibernate","Standby","WakeUp","AllCandidates","Alphanumeric","CodeInput","Compose","Convert","Dead","FinalMode","GroupFirst","GroupLast","GroupNext","GroupPrevious","ModeChange","NextCandidate","NonConvert","PreviousCandidate","Process","SingleCandidate","HangulMode","HanjaMode","JunjaMode","Eisu","Hankaku","Hiragana","HiraganaKatakana","KanaMode","KanjiMode","Katakana","Romaji","Zenkaku","ZenkakuHankaku","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","Soft1","Soft2","Soft3","Soft4","ChannelDown","ChannelUp","Close","MailForward","MailReply","MailSend","MediaClose","MediaFastForward","MediaPause","MediaPlay","MediaPlayPause","MediaRecord","MediaRewind","MediaStop","MediaTrackNext","MediaTrackPrevious","New","Open","Print","Save","SpellCheck","Key11","Key12","AudioBalanceLeft","AudioBalanceRight","AudioBassBoostDown","AudioBassBoostToggle","AudioBassBoostUp","AudioFaderFront","AudioFaderRear","AudioSurroundModeNext","AudioTrebleDown","AudioTrebleUp","AudioVolumeDown","AudioVolumeUp","AudioVolumeMute","MicrophoneToggle","MicrophoneVolumeDown","MicrophoneVolumeUp","MicrophoneVolumeMute","SpeechCorrectionList","SpeechInputToggle","LaunchApplication1","LaunchApplication2","LaunchCalendar","LaunchContacts","LaunchMail","LaunchMediaPlayer","LaunchMusicPlayer","LaunchPhone","LaunchScreenSaver","LaunchSpreadsheet","LaunchWebBrowser","LaunchWebCam","LaunchWordProcessor","BrowserBack","BrowserFavorites","BrowserForward","BrowserHome","BrowserRefresh","BrowserSearch","BrowserStop","AppSwitch","Call","Camera","CameraFocus","EndCall","GoBack","GoHome","HeadsetHook","LastNumberRedial","Notification","MannerMode","VoiceDial","TV","TV3DMode","TVAntennaCable","TVAudioDescription","TVAudioDescriptionMixDown","TVAudioDescriptionMixUp","TVContentsMenu","TVDataService","TVInput","TVInputComponent1","TVInputComponent2","TVInputComposite1","TVInputComposite2","TVInputHDMI1","TVInputHDMI2","TVInputHDMI3","TVInputHDMI4","TVInputVGA1","TVMediaContext","TVNetwork","TVNumberEntry","TVPower","TVRadioService","TVSatellite","TVSatelliteBS","TVSatelliteCS","TVSatelliteToggle","TVTerrestrialAnalog","TVTerrestrialDigital","TVTimer","AVRInput","AVRPower","ColorF0Red","ColorF1Green","ColorF2Yellow","ColorF3Blue","ColorF4Grey","ColorF5Brown","ClosedCaptionToggle","Dimmer","DisplaySwap","DVR","Exit","FavoriteClear0","FavoriteClear1","FavoriteClear2","FavoriteClear3","FavoriteRecall0","FavoriteRecall1","FavoriteRecall2","FavoriteRecall3","FavoriteStore0","FavoriteStore1","FavoriteStore2","FavoriteStore3","Guide","GuideNextDay","GuidePreviousDay","Info","InstantReplay","Link","ListProgram","LiveContent","Lock","MediaApps","MediaAudioTrack","MediaLast","MediaSkipBackward","MediaSkipForward","MediaStepBackward","MediaStepForward","MediaTopMenu","NavigateIn","NavigateNext","NavigateOut","NavigatePrevious","NextFavoriteChannel","NextUserProfile","OnDemand","Pairing","PinPDown","PinPMove","PinPToggle","PinPUp","PlaySpeedDown","PlaySpeedReset","PlaySpeedUp","RandomToggle","RcLowBattery","RecordSpeedNext","RfBypass","ScanChannelsToggle","ScreenModeNext","Settings","SplitScreenToggle","STBInput","STBPower","Subtitle","Teletext","VideoModeNext","Wink","ZoomToggle","AudioVolumeDown","AudioVolumeUp","AudioVolumeMute","BrowserBack","BrowserForward","ChannelDown","ChannelUp","ContextMenu","Eject","End","Enter","Home","MediaFastForward","MediaPlay","MediaPlayPause","MediaRecord","MediaRewind","MediaStop","MediaNextTrack","MediaPause","MediaPreviousTrack","Power"],d=c.map(e=>e.toUpperCase());String.prototype.isSpecialKey=function(e){return e?c.indexOf(this)>-1:d.indexOf(this.toUpperCase())>-1},jQuery.fn.printed=function(){let e=this.parent();for(;e.length;){if(e[0]==document.body)return!0;e=e.parent()}return!1}},function(e,t,n){"use strict";
